pipeline {
    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins_aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
        AWS_DEFAULT_REGION    = "eu-central-1"
        DOCKER_REGISTRY = "docker.io"
        NEXUS_URL = "3.76.12.7:8082"
        NEXUS_PASSWORD = credentials('NEXUS_PASSWORD')
    }

    agent any

    stages {

        stage('Provision EC2 Instances with Terraform') {
            steps {
                script {
                    dir("aws-jenkins-observability/terraform/ec2") {
                        echo "Provisioning EC2s..."

                        sh """
                            terraform destroy \
                                -auto-approve \
                                -var="aws_access_key=${AWS_ACCESS_KEY_ID}" \
                                -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                                -var="aws_region=${AWS_DEFAULT_REGION}"
                        """
                        sh 'terraform init'

                        sh '''
                            terraform apply \
                                -auto-approve \
                                -var="aws_access_key=${AWS_ACCESS_KEY_ID}" \
                                -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                                -var="aws_region=${AWS_DEFAULT_REGION}"
                        '''

                        def instances = [
                                app: sh(script: "terraform output -raw app_public_ip", returnStdout: true).trim(),
                                infra: sh(script: "terraform output -raw infra_public_ip", returnStdout: true).trim()
                        ]

                        env.APP_IP   = instances.app
                        env.INFRA_IP = instances.infra

                        echo "EC2 instances IPs:"
                        instances.each { name, ip ->
                            echo "${name} => ${ip}"
                        }
                    }
                }
            }
        }

        stage('Configure EC2s with Ansible') {
            steps {
                script {
                    echo "Configuring EC2s"

                    def stepsForParallel = [:]

                    def instances = [
                            [name: "app",   ip: env.APP_IP],
                            [name: "infra", ip: env.INFRA_IP]
                    ]

                    instances.each { instance ->
                        stepsForParallel["Configure ${instance.name}"] = {
                            withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sshagent(['ansible-ssh-key-aws']) {
                                    echo "Running Ansible for ${instance.name} (${instance.ip})"

                                    sh """
                                        sleep 30
                                        ssh -o StrictHostKeyChecking=no ubuntu@${instance.ip} "echo Connected to ${instance.name}"

                                        ansible-galaxy collection install -r aws-jenkins-observability/ansible/requirements.yaml

                                        ansible-playbook aws-jenkins-observability/ansible/playbook.yaml \
                                            -i '${instance.ip},' \
                                            -e "ansible_host=${instance.ip} ansible_user=ubuntu role=${instance.name} docker_password=${DOCKER_PASSWORD}"
                                    """
                                }
                            }
                        }
                    }

                    parallel stepsForParallel
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("aws-jenkins-observability/app") {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker build -f Dockerfile.test -t app-fastapi:test .
                    """
                    }
                }
            }
        }

//        stage('Start Python App on App EC2') {
//            steps {
//                script {
//                    echo "Starting Python app on ${env.APP_IP}"
//
//                    sshagent(['ansible-ssh-key-aws']) {
//                        sh """
//                            ssh -o StrictHostKeyChecking=no ubuntu@${env.APP_IP} '
//                                cd ~/app &&
//                                docker compose up -d
//                                sleep 10
//                            '
//                        """
//                    }
//                }
//            }
//        }
//
        stage('Run integration tests ') {
            steps {
                sshagent(['ansible-ssh-key-aws']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ubuntu@${env.APP_IP} '
                        cd ~/app &&
                        docker build -f Dockerfile.test -t app-fastapi:test . &&
                        docker network create app_default || true &&
                        docker run --rm \
                          --network=app_default \
                          -e DATABASE_URL=postgresql://fastapi:fastapi@db:5432/fastapidb \
                          app-fastapi:test pytest test_app.py
                    '
                    """
                }
            }
        }

        stage('Run e2e tests') {
            steps {
                sshagent(['ansible-ssh-key-aws']) {
                    sh """
            ssh -o StrictHostKeyChecking=no ubuntu@${env.APP_IP} '
                cd ~/app &&

                docker build -t app-fastapi:test . &&

                docker rm -f test-runner || true &&

                docker run --name test-runner \\
                    --network=app_default \\
                    -e DATABASE_URL=postgresql://fastapi:fastapi@db:5432/fastapidb \\
                    app-fastapi:test \\
                    sh -c "pytest test_e2e.py --alluredir=allure-results && allure generate allure-results -o allure-report --clean --single-file" &&

                docker cp test-runner:/app/allure-report ./allure-report &&
                docker rm test-runner
            '
            """

                    sh """
            scp -o StrictHostKeyChecking=no -r ubuntu@${env.APP_IP}:~/app/allure-report ./allure-report
            """
                }

                archiveArtifacts artifacts: 'allure-report/**', fingerprint: true
            }
        }

//        stage('Performance test ') {
//            steps {
//                sshagent(['ansible-ssh-key-aws']) {
//                    sh """
//                        ssh -o StrictHostKeyChecking=no ubuntu@${env.APP_IP} '
//                        cd ~/k6 &&
//                        docker build -t app-performance:test . &&
//                        docker run --rm --add-host=host.docker.internal:host-gateway app-performance:test --vus=200 --duration=5m
//                         '
//                        """
//                }
//            }
//        }
        stage('Push Docker Image to Nexus') {
            steps {
                dir("aws-jenkins-observability/app") {
                        sh """
                    docker tag app-fastapi:test ${NEXUS_URL}/repository/docker-hosted/app-fastapi:test
                    echo "$NEXUS_PASSWORD" | docker login ${NEXUS_URL} -u "admin" --password-stdin
                    docker push ${NEXUS_URL}/repository/docker-hosted/app-fastapi:test
                """
                }
            }
        }

    }

    post {
        always {
            script {
                dir("aws-jenkins-observability/terraform/ec2") {
                    echo "Destroying EC2 instances"
                    sh '''
                        terraform destroy \
                            -auto-approve \
                            -var="aws_access_key=${AWS_ACCESS_KEY_ID}" \
                            -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                            -var="aws_region=${AWS_DEFAULT_REGION}"
                    '''
                }
            }
        }
    }
}
