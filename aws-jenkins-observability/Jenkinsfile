pipeline {
    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins_aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
        AWS_DEFAULT_REGION    = "eu-central-1"
    }

    agent any

    stages {
        stage('Provision EC2 Instances with Terraform') {
            steps {
                script {
                    dir("aws-jenkins-observability/terraform/ec2") {
                        echo "Running Terraform to provision AWS EC2 instances..."

                        sh """
                            terraform destroy \
                                -auto-approve \
                                -var="aws_access_key=${AWS_ACCESS_KEY_ID}" \
                                -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                                -var="aws_region=${AWS_DEFAULT_REGION}"
                        """
                        sh 'terraform init'

                        sh '''
                            terraform apply \
                                -auto-approve \
                                -var="aws_access_key=${AWS_ACCESS_KEY_ID}" \
                                -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                                -var="aws_region=${AWS_DEFAULT_REGION}"
                        '''

                        // Collect IPs
                        env.APP_IP   = sh(script: "terraform output -raw app_public_ip", returnStdout: true).trim()
                        env.INFRA_IP = sh(script: "terraform output -raw infra_public_ip", returnStdout: true).trim()

                        echo "Provisioned EC2 instances:"
                        echo "app => ${env.APP_IP}"
                        echo "infra => ${env.INFRA_IP}"
                    }
                }
            }
        }

        stage('Configure EC2s with Ansible') {
            parallel {
                stage('Configure app') {
                    steps {
                        withCredentials([usernamePassword(
                                credentialsId: 'docker-credentials',
                                usernameVariable: 'DOCKER_USERNAME',
                                passwordVariable: 'DOCKER_PASSWORD'
                        )]) {
                            sshagent(['ansible-ssh-key-aws']) {
                                sh """
                                    sleep 30
                                    ssh -o StrictHostKeyChecking=no ubuntu@${env.APP_IP} "echo Connected to app"
                                    ansible-galaxy collection install -r aws-jenkins-observability/ansible/requirements.yaml
                                    ansible-playbook aws-jenkins-observability/ansible/playbook.yaml \
                                        -i '${env.APP_IP},' \
                                        -e "ansible_host=${env.APP_IP} ansible_user=ubuntu role=app docker_password=${DOCKER_PASSWORD}"
                                """
                            }
                        }
                    }
                }

                stage('Configure infra') {
                    steps {
                        withCredentials([usernamePassword(
                                credentialsId: 'docker-credentials',
                                usernameVariable: 'DOCKER_USERNAME',
                                passwordVariable: 'DOCKER_PASSWORD'
                        )]) {
                            sshagent(['ansible-ssh-key-aws']) {
                                sh """
                                    sleep 30
                                    ssh -o StrictHostKeyChecking=no ubuntu@${env.INFRA_IP} "echo Connected to infra"
                                    ansible-galaxy collection install -r aws-jenkins-observability/ansible/requirements.yaml
                                    ansible-playbook aws-jenkins-observability/ansible/playbook.yaml \
                                        -i '${env.INFRA_IP},' \
                                        -e "ansible_host=${env.INFRA_IP} ansible_user=ubuntu role=infra docker_password=${DOCKER_PASSWORD}"
                                """
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                dir("aws-jenkins-observability/terraform") {
                    echo "Destroying EC2 instances using Terraform..."
                    sh '''
                        terraform destroy \
                            -auto-approve \
                            -var="aws_access_key=${AWS_ACCESS_KEY_ID}" \
                            -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                            -var="aws_region=${AWS_DEFAULT_REGION}"
                    '''
                }
            }
        }
    }
}
